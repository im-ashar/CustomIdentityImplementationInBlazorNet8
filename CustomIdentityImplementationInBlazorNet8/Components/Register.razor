@page "/Account/Register"

@inject UserManager<AppUser> UserManager
@inject NavigationManager NavigationManager

<PageTitle>Register</PageTitle>


<div class="row d-flex justify-content-center">
    <div class="col-md-4">
        <h1>Register</h1>
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register" Enhance>
            <DataAnnotationsValidator />
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <p class="text-danger">@errorMessage</p>
            }
            <h2>Create a new account.</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="confirm-password">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
            <div class="mt-3">
                <p>
                    <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Login", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Already Have An Account? Login</a>
                </p>
            </div>
        </EditForm>
    </div>
</div>

@code {

    private string? errorMessage;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    public async Task RegisterUser()
    {
        var user = new AppUser
            {
                UserName = Input.Email,
                Email = Input.Email,
                EmailConfirmed = true
            };
        var result = await UserManager.CreateAsync(user, Input.Password);
        if (result.Succeeded)
        {
            var roleResult = await UserManager.AddToRoleAsync(user, "User");
            if (roleResult.Succeeded)
            {
                NavigationManager.NavigateTo("Account/Login");
            }
            errorMessage = string.Join(", ", roleResult.Errors.Select(e => e.Description));
        }
        else
        {
            errorMessage = string.Join(", ", result.Errors.Select(e => e.Description));
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
